{
	"info": {
		"_postman_id": "f3a1ad6c-3dd2-48c8-ad3c-0f85dbc75f4e",
		"name": "Test Case API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19770079",
		"_collection_link": "https://testerteam1230.postman.co/workspace/Team5_FinSera~194ad7ba-8890-4b9f-a66a-60590481aa6f/collection/19770079-f3a1ad6c-3dd2-48c8-ad3c-0f85dbc75f4e?action=share&source=collection_link&creator=19770079"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login user",
					"item": [
						{
							"name": "Negative Test Case",
							"item": [
								{
									"name": "404 Login user not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const schema = \r",
													"{\r",
													"  \r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\" : \"customerusernamesalah\",\r\n  \"password\" : \"customerusernamesalah\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/auth/user/login",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"user",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 Login wrong identity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"        pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"const schema = \r",
													"{\r",
													"  \r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\" : \"johndoe\",\r\n  \"password\" : \"password12345677\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/auth/user/login",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"user",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 Login [/] wrong identity Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"        pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"const schema = \r",
													"{\r",
													"  \r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\" : \"johndoe\",\r\n  \"password\" : \"password12345677\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/auth/user/login/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"user",
												"login",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "404 Login [/] user not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const schema = \r",
													"{\r",
													"  \r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\" : \"customerusernamesalah\",\r\n  \"password\" : \"customerusernamesalah\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/auth/user/login/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"user",
												"login",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Success Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const dataJson = pm.response.json();\r",
											"\r",
											"pm.environment.set('USER_TOKEN', dataJson.data.accessToken);\r",
											"pm.environment.set('USER_REFRESH_TOKEN', dataJson.data.refreshToken);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = \r",
											"{\r",
											" \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"accessToken\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"refreshToken\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"status\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"accessToken\",\r",
											"        \"refreshToken\",\r",
											"        \"userId\",\r",
											"        \"status\"\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\" : \"johndoe\",\r\n  \"password\" : \"password123\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/auth/user/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Success Login [/]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const dataJson = pm.response.json();\r",
											"\r",
											"pm.environment.set('USER_TOKEN', dataJson.data.accessToken);\r",
											"pm.environment.set('USER_REFRESH_TOKEN', dataJson.data.refreshToken);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = \r",
											"{\r",
											" \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"accessToken\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"refreshToken\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"userId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"status\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"accessToken\",\r",
											"        \"refreshToken\",\r",
											"        \"userId\",\r",
											"        \"status\"\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\" : \"johndoe\",\r\n  \"password\" : \"password123\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/auth/user/login/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"user",
										"login",
										""
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Validate 'username' and 'password' data types\", function () {\r",
									"    // Parsing request body dari JSON ke Object\r",
									"    let requestBody = pm.request.body.raw;\r",
									"    let requestObject = JSON.parse(requestBody);\r",
									"\r",
									"    // Validasi bahwa 'username' adalah string\r",
									"    pm.expect(typeof requestObject.username).to.eql('string');\r",
									"\r",
									"    // Validasi bahwa 'password' adalah string\r",
									"    pm.expect(typeof requestObject.password).to.eql('string');\r",
									"});\r",
									""
								]
							}
						}
					]
				},
				{
					"name": "Re-Login User",
					"item": [
						{
							"name": "Negative Test Case",
							"item": [
								{
									"name": "401 Re-Login User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"        pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"const schema = \r",
													"{\r",
													" \r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{USER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"mpinAuth\" : \"1234563948293489\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/auth/relogin",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"relogin"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 Re-Login User [/]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"        pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"const schema = \r",
													"{\r",
													" \r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{USER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"mpinAuth\" : \"1234563948293489\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/auth/relogin/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"relogin",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Success Re-Login User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mpinAuth\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/auth/relogin",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"relogin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Success Re-Login User [/]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mpinAuth\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/auth/relogin/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"relogin",
										""
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.environment.get(\"BASE_URL\") + '/api/v1/auth/user/refresh-token',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"refreshToken\": pm.environment.get(\"USER_REFRESH_TOKEN\")\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(err);\r",
									"    } else {\r",
									"        const dataJson = res.json();\r",
									"        pm.environment.set('USER_TOKEN', dataJson.data.accessToken); // Simpan access token baru ke environment\r",
									"    }\r",
									"});\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Validate 'mpinAuth' data type\", function () {\r",
									"    // Parsing request body dari JSON ke Object\r",
									"    let requestBody = pm.request.body.raw;\r",
									"    let requestObject = JSON.parse(requestBody);\r",
									"\r",
									"    // Validasi bahwa 'mpinAuth' adalah string\r",
									"    pm.expect(typeof requestObject.mpinAuth).to.eql('string');\r",
									"});\r",
									""
								]
							}
						}
					]
				},
				{
					"name": "Refresh Token",
					"item": [
						{
							"name": "Success Refresh Token [/]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const dataJson = pm.response.json();\r",
											"\r",
											"pm.environment.set('USER_TOKEN', dataJson.data.accessToken);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = \r",
											"{\r",
											" \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"accessToken\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"accessToken\"\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"refreshToken\": \"{{USER_REFRESH_TOKEN}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/auth/user/refresh-token/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"user",
										"refresh-token",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Success Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const dataJson = pm.response.json();\r",
											"\r",
											"pm.environment.set('USER_TOKEN', dataJson.data.accessToken);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = \r",
											"{\r",
											" \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"accessToken\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"accessToken\"\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"refreshToken\": \"{{USER_REFRESH_TOKEN}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/auth/user/refresh-token",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"user",
										"refresh-token"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Validate 'refreshToken' data type\", function () {\r",
									"    // Parsing request body dari JSON ke Object\r",
									"    let requestBody = pm.request.body.raw;\r",
									"    let requestObject = JSON.parse(requestBody);\r",
									"\r",
									"    // Validasi bahwa 'refreshToken' adalah string\r",
									"    pm.expect(typeof requestObject.refreshToken).to.eql('string');\r",
									"});\r",
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"\r",
							" \r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Informasi Saldo",
			"item": [
				{
					"name": "Informasi Saldo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"customerId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"accountNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"amount\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"amount\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"currency\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"amount\",\r",
									"            \"currency\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"customerId\",\r",
									"        \"name\",\r",
									"        \"accountNumber\",\r",
									"        \"amount\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/amount",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"amount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Informasi Saldo [/]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"customerId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"accountNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"amount\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"amount\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"currency\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"amount\",\r",
									"            \"currency\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"customerId\",\r",
									"        \"name\",\r",
									"        \"accountNumber\",\r",
									"        \"amount\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/amount/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"amount",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"BASE_URL\") + '/api/v1/auth/user/refresh-token',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            \"refreshToken\": pm.environment.get(\"USER_REFRESH_TOKEN\")\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        const dataJson = res.json();\r",
							"        pm.environment.set('USER_TOKEN', dataJson.data.accessToken); // Simpan access token baru ke environment\r",
							"    }\r",
							"});\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Transfer",
			"item": [
				{
					"name": "Transfer Sesama Bank",
					"item": [
						{
							"name": "Negative Test",
							"item": [
								{
									"name": "400 Same ACC NUM Same Bank",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"        pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate 'accountnum_recipient', 'nominal', 'note', and 'pin' data types\", function () {\r",
													"    // Parsing request body dari JSON ke Object\r",
													"    let requestBody = pm.request.body.raw;\r",
													"    let requestObject = JSON.parse(requestBody);\r",
													"\r",
													"    // Validasi bahwa 'accountnum_recipient' adalah string\r",
													"    pm.expect(typeof requestObject.accountnum_recipient).to.eql('string');\r",
													"\r",
													"    // Validasi bahwa 'nominal' adalah number\r",
													"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
													"\r",
													"    // Validasi bahwa 'note' adalah string\r",
													"    pm.expect(typeof requestObject.note).to.eql('string');\r",
													"\r",
													"    // Validasi bahwa 'pin' adalah string\r",
													"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"const schema = \r",
													"\r",
													"{\r",
													"\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{USER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accountnum_recipient\": \"123456789\",\r\n    \"nominal\" : 100,\r\n    \"note\" : \"Test API QA\",\r\n    \"pin\" : \"123456\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/transaction/transaction-intra/create",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"transaction",
												"transaction-intra",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 Wrong PIN Same Bank",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"        pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate 'accountnum_recipient', 'nominal', 'note', and 'pin' data types\", function () {\r",
													"    // Parsing request body dari JSON ke Object\r",
													"    let requestBody = pm.request.body.raw;\r",
													"    let requestObject = JSON.parse(requestBody);\r",
													"\r",
													"    // Validasi bahwa 'accountnum_recipient' adalah string\r",
													"    pm.expect(typeof requestObject.accountnum_recipient).to.eql('string');\r",
													"\r",
													"    // Validasi bahwa 'nominal' adalah number\r",
													"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
													"\r",
													"    // Validasi bahwa 'note' adalah string\r",
													"    pm.expect(typeof requestObject.note).to.eql('string');\r",
													"\r",
													"    // Validasi bahwa 'pin' adalah string\r",
													"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"const schema = \r",
													"\r",
													"{\r",
													"\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{USER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accountnum_recipient\": \"987654321\",\r\n    \"nominal\" : 100,\r\n    \"note\" : \"Test API QA\",\r\n    \"pin\" : \"444444\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/transaction/transaction-intra/create",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"transaction",
												"transaction-intra",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "402 Insufficient Balance Same Bank",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 402\", function () {\r",
													"        pm.response.to.have.status(402);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate 'accountnum_recipient', 'nominal', 'note', and 'pin' data types\", function () {\r",
													"    // Parsing request body dari JSON ke Object\r",
													"    let requestBody = pm.request.body.raw;\r",
													"    let requestObject = JSON.parse(requestBody);\r",
													"\r",
													"    // Validasi bahwa 'accountnum_recipient' adalah string\r",
													"    pm.expect(typeof requestObject.accountnum_recipient).to.eql('string');\r",
													"\r",
													"    // Validasi bahwa 'nominal' adalah number\r",
													"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
													"\r",
													"    // Validasi bahwa 'note' adalah string\r",
													"    pm.expect(typeof requestObject.note).to.eql('string');\r",
													"\r",
													"    // Validasi bahwa 'pin' adalah string\r",
													"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"const schema = \r",
													"\r",
													"{\r",
													"\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{USER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accountnum_recipient\": \"987654321\",\r\n    \"nominal\" : 999999999,\r\n    \"note\" : \"Test API QA\",\r\n    \"pin\" : \"123456\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/transaction/transaction-intra/create",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"transaction",
												"transaction-intra",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 Recipient account not found Same Bank",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate 'accountnum_recipient', 'nominal', 'note', and 'pin' data types\", function () {\r",
													"    // Parsing request body dari JSON ke Object\r",
													"    let requestBody = pm.request.body.raw;\r",
													"    let requestObject = JSON.parse(requestBody);\r",
													"\r",
													"    // Validasi bahwa 'accountnum_recipient' adalah string\r",
													"    pm.expect(typeof requestObject.accountnum_recipient).to.eql('string');\r",
													"\r",
													"    // Validasi bahwa 'nominal' adalah number\r",
													"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
													"\r",
													"    // Validasi bahwa 'note' adalah string\r",
													"    pm.expect(typeof requestObject.note).to.eql('string');\r",
													"\r",
													"    // Validasi bahwa 'pin' adalah string\r",
													"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"const schema = \r",
													"\r",
													"{\r",
													"\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{USER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accountnum_recipient\": \"987644444\",\r\n    \"nominal\" : 100,\r\n    \"note\" : \"Test API QA\",\r\n    \"pin\" : \"123456\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/transaction/transaction-intra/create",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"transaction",
												"transaction-intra",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 ACC NUM Not Found Check Same Bank Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate 'accountnum_recipient' data type\", function () {\r",
													"    // Parsing request body dari JSON ke Object\r",
													"    let requestBody = pm.request.body.raw;\r",
													"    let requestObject = JSON.parse(requestBody);\r",
													"\r",
													"    // Validasi bahwa 'accountnum_recipient' adalah string\r",
													"    pm.expect(typeof requestObject.accountnum_recipient).to.eql('string');\r",
													"});\r",
													"\r",
													"\r",
													"const schema = \r",
													"\r",
													"{\r",
													"\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{USER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accountnum_recipient\" : \"444555666\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/transaction/transaction-intra/check",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"transaction",
												"transaction-intra",
												"check"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Transfer Sesama Bank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'accountnum_recipient', 'nominal', 'note', and 'pin' data types\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'accountnum_recipient' adalah string\r",
											"    pm.expect(typeof requestObject.accountnum_recipient).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'nominal' adalah number\r",
											"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
											"\r",
											"    // Validasi bahwa 'note' adalah string\r",
											"    pm.expect(typeof requestObject.note).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'pin' adalah string\r",
											"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											" \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"transaction_num\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"transaction_date\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name_sender\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"accountnum_sender\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name_recipient\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"accountnum_recipient\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"nominal\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"note\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"transaction_num\",\r",
											"        \"transaction_date\",\r",
											"        \"name_sender\",\r",
											"        \"accountnum_sender\",\r",
											"        \"name_recipient\",\r",
											"        \"accountnum_recipient\",\r",
											"        \"nominal\",\r",
											"        \"note\"\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accountnum_recipient\": \"987654321\",\r\n    \"nominal\" : 100,\r\n    \"note\" : \"Test API QA\",\r\n    \"pin\" : \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/transaction/transaction-intra/create",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"transaction",
										"transaction-intra",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer Sesama Bank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'accountnum_recipient' data type\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'accountnum_recipient' adalah string\r",
											"    pm.expect(typeof requestObject.accountnum_recipient).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											" \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"name_recipient\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"accountnum_recipient\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"name_recipient\",\r",
											"        \"accountnum_recipient\"\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accountnum_recipient\" : \"987654321\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/transaction/transaction-intra/check",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"transaction",
										"transaction-intra",
										"check"
									]
								}
							},
							"response": []
						},
						{
							"name": "History Transaction Same Bank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											" \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"name_recipient\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"bank_name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"account_number_recipient\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"name_recipient\",\r",
											"            \"bank_name\",\r",
											"            \"account_number_recipient\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/transaction/transaction-intra/history",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"transaction",
										"transaction-intra",
										"history"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transfer Antar Bank",
					"item": [
						{
							"name": "Negative Test",
							"item": [
								{
									"name": "401 Wrong PIN Another Bank",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"        pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate 'bank_id', 'accountnum_recipient', 'nominal', 'note', and 'pin' data types\", function () {\r",
													"    // Parsing request body dari JSON ke Object\r",
													"    let requestBody = pm.request.body.raw;\r",
													"    let requestObject = JSON.parse(requestBody);\r",
													"\r",
													"    // Validasi bahwa 'bank_id' adalah number\r",
													"    pm.expect(typeof requestObject.bank_id).to.eql('number');\r",
													"\r",
													"    // Validasi bahwa 'accountnum_recipient' adalah string\r",
													"    pm.expect(typeof requestObject.accountnum_recipient).to.eql('string');\r",
													"\r",
													"    // Validasi bahwa 'nominal' adalah number\r",
													"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
													"\r",
													"    // Validasi bahwa 'note' adalah string\r",
													"    pm.expect(typeof requestObject.note).to.eql('string');\r",
													"\r",
													"    // Validasi bahwa 'pin' adalah string\r",
													"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"const schema = \r",
													"\r",
													"{\r",
													"\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{USER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bank_id\":2,\r\n    \"accountnum_recipient\":\"789012345\",\r\n    \"nominal\":10000,\r\n    \"note\":\"Test QA\",\r\n    \"pin\":\"123453\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/transaction/transaction-inter/create",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"transaction",
												"transaction-inter",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "402 Insufficient Balance Another Bank",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 402\", function () {\r",
													"        pm.response.to.have.status(402);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate 'bank_id', 'accountnum_recipient', 'nominal', 'note', and 'pin' data types\", function () {\r",
													"    // Parsing request body dari JSON ke Object\r",
													"    let requestBody = pm.request.body.raw;\r",
													"    let requestObject = JSON.parse(requestBody);\r",
													"\r",
													"    // Validasi bahwa 'bank_id' adalah number\r",
													"    pm.expect(typeof requestObject.bank_id).to.eql('number');\r",
													"\r",
													"    // Validasi bahwa 'accountnum_recipient' adalah string\r",
													"    pm.expect(typeof requestObject.accountnum_recipient).to.eql('string');\r",
													"\r",
													"    // Validasi bahwa 'nominal' adalah number\r",
													"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
													"\r",
													"    // Validasi bahwa 'note' adalah string\r",
													"    pm.expect(typeof requestObject.note).to.eql('string');\r",
													"\r",
													"    // Validasi bahwa 'pin' adalah string\r",
													"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"const schema = \r",
													"\r",
													"{\r",
													"\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{USER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bank_id\":2,\r\n    \"accountnum_recipient\":\"789012345\",\r\n    \"nominal\":999999999,\r\n    \"note\":\"Test QA\",\r\n    \"pin\":\"123456\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/transaction/transaction-inter/create",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"transaction",
												"transaction-inter",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 Recipient account not found Anoither Bank",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate 'bank_id', 'accountnum_recipient', 'nominal', 'note', and 'pin' data types\", function () {\r",
													"    // Parsing request body dari JSON ke Object\r",
													"    let requestBody = pm.request.body.raw;\r",
													"    let requestObject = JSON.parse(requestBody);\r",
													"\r",
													"    // Validasi bahwa 'bank_id' adalah number\r",
													"    pm.expect(typeof requestObject.bank_id).to.eql('number');\r",
													"\r",
													"    // Validasi bahwa 'accountnum_recipient' adalah string\r",
													"    pm.expect(typeof requestObject.accountnum_recipient).to.eql('string');\r",
													"\r",
													"    // Validasi bahwa 'nominal' adalah number\r",
													"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
													"\r",
													"    // Validasi bahwa 'note' adalah string\r",
													"    pm.expect(typeof requestObject.note).to.eql('string');\r",
													"\r",
													"    // Validasi bahwa 'pin' adalah string\r",
													"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"const schema = \r",
													"\r",
													"{\r",
													"\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{USER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bank_id\":2,\r\n    \"accountnum_recipient\":\"789012344\",\r\n    \"nominal\":100,\r\n    \"note\":\"Test QA\",\r\n    \"pin\":\"123456\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/transaction/transaction-inter/create",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"transaction",
												"transaction-inter",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 ACC NUM Not Found Check Another Bank Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate 'bank_id' and 'accountnum_recipient' data types\", function () {\r",
													"    // Parsing request body dari JSON ke Object\r",
													"    let requestBody = pm.request.body.raw;\r",
													"    let requestObject = JSON.parse(requestBody);\r",
													"\r",
													"    // Validasi bahwa 'bank_id' adalah number\r",
													"    pm.expect(typeof requestObject.bank_id).to.eql('number');\r",
													"\r",
													"    // Validasi bahwa 'accountnum_recipient' adalah string\r",
													"    pm.expect(typeof requestObject.accountnum_recipient).to.eql('string');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"const schema = \r",
													"\r",
													"{\r",
													"\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{USER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bank_id\":2,\r\n    \"accountnum_recipient\":\"111222333\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/transaction/transaction-inter/check",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"transaction",
												"transaction-inter",
												"check"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Transfer Antar Bank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'bank_id', 'accountnum_recipient', 'nominal', 'note', and 'pin' data types\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'bank_id' adalah number\r",
											"    pm.expect(typeof requestObject.bank_id).to.eql('number');\r",
											"\r",
											"    // Validasi bahwa 'accountnum_recipient' adalah string\r",
											"    pm.expect(typeof requestObject.accountnum_recipient).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'nominal' adalah number\r",
											"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
											"\r",
											"    // Validasi bahwa 'note' adalah string\r",
											"    pm.expect(typeof requestObject.note).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'pin' adalah string\r",
											"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											" \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"transaction_num\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"transaction_date\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name_sender\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"accountnum_sender\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"bank_name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name_recipient\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"accountnum_recipient\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"nominal\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"admin_fee\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"note\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"transaction_num\",\r",
											"        \"transaction_date\",\r",
											"        \"name_sender\",\r",
											"        \"accountnum_sender\",\r",
											"        \"bank_name\",\r",
											"        \"name_recipient\",\r",
											"        \"accountnum_recipient\",\r",
											"        \"nominal\",\r",
											"        \"admin_fee\",\r",
											"        \"note\"\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bank_id\":2,\r\n    \"accountnum_recipient\":\"789012345\",\r\n    \"nominal\":10000,\r\n    \"note\":\"Test QA\",\r\n    \"pin\":\"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/transaction/transaction-inter/create",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"transaction",
										"transaction-inter",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer Antar Bank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'bank_id' and 'accountnum_recipient' data types\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'bank_id' adalah number\r",
											"    pm.expect(typeof requestObject.bank_id).to.eql('number');\r",
											"\r",
											"    // Validasi bahwa 'accountnum_recipient' adalah string\r",
											"    pm.expect(typeof requestObject.accountnum_recipient).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"bank_id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"bank_name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"accountnum_recipient\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name_recipient\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"bank_id\",\r",
											"        \"bank_name\",\r",
											"        \"accountnum_recipient\",\r",
											"        \"name_recipient\"\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bank_id\":2,\r\n    \"accountnum_recipient\":\"789012345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/transaction/transaction-inter/check",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"transaction",
										"transaction-inter",
										"check"
									]
								}
							},
							"response": []
						},
						{
							"name": "History Transaction Other Bank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"name_recipient\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"bank_name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"account_number_recipient\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"name_recipient\",\r",
											"            \"bank_name\",\r",
											"            \"account_number_recipient\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/transaction/transaction-inter/history",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"transaction",
										"transaction-inter",
										"history"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List All Bank Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"bank_code\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"bank_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"bank_image\": {\r",
									"              \"type\": \"null\"\r",
									"            },\r",
									"            \"bank_name\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"bank_code\",\r",
									"            \"bank_id\",\r",
									"            \"bank_image\",\r",
									"            \"bank_name\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"bank_code\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"bank_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"bank_image\": {\r",
									"              \"type\": \"null\"\r",
									"            },\r",
									"            \"bank_name\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"bank_code\",\r",
									"            \"bank_id\",\r",
									"            \"bank_image\",\r",
									"            \"bank_name\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"bank_code\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"bank_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"bank_image\": {\r",
									"              \"type\": \"null\"\r",
									"            },\r",
									"            \"bank_name\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"bank_code\",\r",
									"            \"bank_id\",\r",
									"            \"bank_image\",\r",
									"            \"bank_name\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"bank_code\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"bank_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"bank_image\": {\r",
									"              \"type\": \"null\"\r",
									"            },\r",
									"            \"bank_name\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"bank_code\",\r",
									"            \"bank_id\",\r",
									"            \"bank_image\",\r",
									"            \"bank_name\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/bank/get-all",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"bank",
								"get-all"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"BASE_URL\") + '/api/v1/auth/user/refresh-token',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            \"refreshToken\": pm.environment.get(\"USER_REFRESH_TOKEN\")\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        const dataJson = res.json();\r",
							"        pm.environment.set('USER_TOKEN', dataJson.data.accessToken); // Simpan access token baru ke environment\r",
							"    }\r",
							"});\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Profiling",
			"item": [
				{
					"name": "Detail User",
					"item": [
						{
							"name": "Detail User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											" \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"idCustomer\": {\r",
											"          \"type\": \"number\"\r",
											"        },\r",
											"        \"username\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"email\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"phone\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"address\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"idCustomer\",\r",
											"        \"username\",\r",
											"        \"name\",\r",
											"        \"email\",\r",
											"        \"phone\",\r",
											"        \"address\"\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/profile",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Detail User [/]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											" \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"idCustomer\": {\r",
											"          \"type\": \"number\"\r",
											"        },\r",
											"        \"username\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"email\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"phone\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"address\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"idCustomer\",\r",
											"        \"username\",\r",
											"        \"name\",\r",
											"        \"email\",\r",
											"        \"phone\",\r",
											"        \"address\"\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/profile/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"profile",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Pin APP Copy",
					"item": [
						{
							"name": "Negative Test",
							"item": [
								{
									"name": "400 Update Same PIN AppLock",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"        pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate 'mpinAuth' data type\", function () {\r",
													"    // Parsing request body dari JSON ke Object\r",
													"    let requestBody = pm.request.body.raw;\r",
													"    let requestObject = JSON.parse(requestBody);\r",
													"\r",
													"    // Validasi bahwa 'mpinAuth' adalah string\r",
													"    pm.expect(typeof requestObject.mpinAuth).to.eql('string');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"const schema = \r",
													"\r",
													"{\r",
													"\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{USER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"mpinAuth\": \"123456\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/profile/update-mpin",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"profile",
												"update-mpin"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 Update With AppLock 5 Digit PIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"        pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate 'mpinAuth' data type\", function () {\r",
													"    // Parsing request body dari JSON ke Object\r",
													"    let requestBody = pm.request.body.raw;\r",
													"    let requestObject = JSON.parse(requestBody);\r",
													"\r",
													"    // Validasi bahwa 'mpinAuth' adalah string\r",
													"    pm.expect(typeof requestObject.mpinAuth).to.eql('string');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"const schema = \r",
													"\r",
													"{\r",
													"\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"code\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"boolean\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"null\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"code\",\r",
													"    \"message\",\r",
													"    \"status\",\r",
													"    \"data\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validating schema\", function () {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{USER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"mpinAuth\": \"12345\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/profile/update-mpin",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"profile",
												"update-mpin"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update PIN AppLock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'mpinAuth' data type\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'mpinAuth' adalah string\r",
											"    pm.expect(typeof requestObject.mpinAuth).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mpinAuth\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/profile/update-mpin",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"profile",
										"update-mpin"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"BASE_URL\") + '/api/v1/auth/user/refresh-token',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            \"refreshToken\": pm.environment.get(\"USER_REFRESH_TOKEN\")\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        const dataJson = res.json();\r",
							"        pm.environment.set('USER_TOKEN', dataJson.data.accessToken); // Simpan access token baru ke environment\r",
							"    }\r",
							"});\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Mutasi",
			"item": [
				{
					"name": "Negative Test",
					"item": [
						{
							"name": "404 Mutasi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "startDate",
										"value": "",
										"type": "text"
									},
									{
										"key": "endDate",
										"value": "",
										"type": "text"
									},
									{
										"key": "page",
										"value": "",
										"type": "text"
									},
									{
										"key": "size",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/mutasi?startDate=2029-07-30&endDate=2029-08-06&page&size=10",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"mutasi"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2029-07-30"
										},
										{
											"key": "endDate",
											"value": "2029-08-06"
										},
										{
											"key": "page",
											"value": null
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "404 Mutasi Download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "startDate",
										"value": "",
										"type": "text"
									},
									{
										"key": "endDate",
										"value": "",
										"type": "text"
									},
									{
										"key": "page",
										"value": "",
										"type": "text"
									},
									{
										"key": "size",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/mutasi/download?startDate=2029-07-30&endDate=2029-08-06&page&size=10",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"mutasi",
										"download"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2029-07-30"
										},
										{
											"key": "endDate",
											"value": "2029-08-06"
										},
										{
											"key": "page",
											"value": null
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "404 Mutasi [/] Download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "startDate",
										"value": "",
										"type": "text"
									},
									{
										"key": "endDate",
										"value": "",
										"type": "text"
									},
									{
										"key": "page",
										"value": "",
										"type": "text"
									},
									{
										"key": "size",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/mutasi/download/?startDate=2029-07-20&endDate=2029-08-06&page&size=10",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"mutasi",
										"download",
										""
									],
									"query": [
										{
											"key": "startDate",
											"value": "2029-07-20"
										},
										{
											"key": "endDate",
											"value": "2029-08-06"
										},
										{
											"key": "page",
											"value": null
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "404 Mutasi [/]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "startDate",
										"value": "",
										"type": "text"
									},
									{
										"key": "endDate",
										"value": "",
										"type": "text"
									},
									{
										"key": "page",
										"value": "",
										"type": "text"
									},
									{
										"key": "size",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accountNumber\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/mutasi/?startDate=2029-07-20&endDate=2029-08-06&page&size=10",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"mutasi",
										""
									],
									"query": [
										{
											"key": "startDate",
											"value": "2029-07-20"
										},
										{
											"key": "endDate",
											"value": "2029-08-06"
										},
										{
											"key": "page",
											"value": null
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mutasi",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"transactionId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"transactionDate\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"noTransaction\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"destinationNameAccountNumber\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"destinationBankName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"amountTransfer\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"amount\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"currency\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"amount\",\r",
									"                \"currency\"\r",
									"              ]\r",
									"            },\r",
									"            \"transactionInformation\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"transactionsType\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"transactionId\",\r",
									"            \"transactionDate\",\r",
									"            \"noTransaction\",\r",
									"            \"destinationNameAccountNumber\",\r",
									"            \"destinationBankName\",\r",
									"            \"amountTransfer\",\r",
									"            \"transactionInformation\",\r",
									"            \"transactionsType\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"transactionId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"transactionDate\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"noTransaction\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"destinationNameAccountNumber\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"destinationBankName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"amountTransfer\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"amount\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"currency\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"amount\",\r",
									"                \"currency\"\r",
									"              ]\r",
									"            },\r",
									"            \"transactionInformation\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"transactionsType\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"transactionId\",\r",
									"            \"transactionDate\",\r",
									"            \"noTransaction\",\r",
									"            \"destinationNameAccountNumber\",\r",
									"            \"destinationBankName\",\r",
									"            \"amountTransfer\",\r",
									"            \"transactionInformation\",\r",
									"            \"transactionsType\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "startDate",
								"value": "",
								"type": "text"
							},
							{
								"key": "endDate",
								"value": "",
								"type": "text"
							},
							{
								"key": "page",
								"value": "",
								"type": "text"
							},
							{
								"key": "size",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/mutasi?startDate=2024-07-20&endDate=2024-08-06&page&size=10",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"mutasi"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2024-07-20"
								},
								{
									"key": "endDate",
									"value": "2024-08-06"
								},
								{
									"key": "page",
									"value": null
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mutasi Download",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "startDate",
								"value": "",
								"type": "text"
							},
							{
								"key": "endDate",
								"value": "",
								"type": "text"
							},
							{
								"key": "page",
								"value": "",
								"type": "text"
							},
							{
								"key": "size",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/mutasi/download?startDate=2024-07-20&endDate=2024-08-06&page&size=10",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"mutasi",
								"download"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2024-07-20"
								},
								{
									"key": "endDate",
									"value": "2024-08-06"
								},
								{
									"key": "page",
									"value": null
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mutasi [/] Download",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "startDate",
								"value": "",
								"type": "text"
							},
							{
								"key": "endDate",
								"value": "",
								"type": "text"
							},
							{
								"key": "page",
								"value": "",
								"type": "text"
							},
							{
								"key": "size",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/mutasi/download/?startDate=2024-07-20&endDate=2024-08-06&page&size=10",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"mutasi",
								"download",
								""
							],
							"query": [
								{
									"key": "startDate",
									"value": "2024-07-20"
								},
								{
									"key": "endDate",
									"value": "2024-08-06"
								},
								{
									"key": "page",
									"value": null
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mutasi [/]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"transactionId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"transactionDate\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"noTransaction\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"destinationNameAccountNumber\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"destinationBankName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"amountTransfer\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"amount\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"currency\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"amount\",\r",
									"                \"currency\"\r",
									"              ]\r",
									"            },\r",
									"            \"transactionInformation\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"transactionsType\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"transactionId\",\r",
									"            \"transactionDate\",\r",
									"            \"noTransaction\",\r",
									"            \"destinationNameAccountNumber\",\r",
									"            \"destinationBankName\",\r",
									"            \"amountTransfer\",\r",
									"            \"transactionInformation\",\r",
									"            \"transactionsType\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"transactionId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"transactionDate\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"noTransaction\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"destinationNameAccountNumber\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"destinationBankName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"amountTransfer\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"amount\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"currency\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"amount\",\r",
									"                \"currency\"\r",
									"              ]\r",
									"            },\r",
									"            \"transactionInformation\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"transactionsType\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"transactionId\",\r",
									"            \"transactionDate\",\r",
									"            \"noTransaction\",\r",
									"            \"destinationNameAccountNumber\",\r",
									"            \"destinationBankName\",\r",
									"            \"amountTransfer\",\r",
									"            \"transactionInformation\",\r",
									"            \"transactionsType\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "startDate",
								"value": "",
								"type": "text"
							},
							{
								"key": "endDate",
								"value": "",
								"type": "text"
							},
							{
								"key": "page",
								"value": "",
								"type": "text"
							},
							{
								"key": "size",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"accountNumber\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/mutasi/?startDate=2024-07-20&endDate=2024-08-06&page&size=10",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"mutasi",
								""
							],
							"query": [
								{
									"key": "startDate",
									"value": "2024-07-20"
								},
								{
									"key": "endDate",
									"value": "2024-08-06"
								},
								{
									"key": "page",
									"value": null
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"BASE_URL\") + '/api/v1/auth/user/refresh-token',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            \"refreshToken\": pm.environment.get(\"USER_REFRESH_TOKEN\")\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        const dataJson = res.json();\r",
							"        pm.environment.set('USER_TOKEN', dataJson.data.accessToken); // Simpan access token baru ke environment\r",
							"    }\r",
							"});\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "VA",
			"item": [
				{
					"name": "Negative Test",
					"item": [
						{
							"name": "401 Transfer VA Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'virtualAccountNumber' and 'mpinAccount' data types\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'virtualAccountNumber' adalah string\r",
											"    pm.expect(typeof requestObject.virtualAccountNumber).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'mpinAccount' adalah string\r",
											"    pm.expect(typeof requestObject.mpinAccount).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"virtualAccountNumber\": \"543216789\",\r\n  \"mpinAccount\": \"444444\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/va/transfer-va",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"va",
										"transfer-va"
									]
								}
							},
							"response": []
						},
						{
							"name": "402 Transfer VA Insufficient amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 402\", function () {\r",
											"        pm.response.to.have.status(402);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'virtualAccountNumber' and 'mpinAccount' data types\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'virtualAccountNumber' adalah string\r",
											"    pm.expect(typeof requestObject.virtualAccountNumber).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'mpinAccount' adalah string\r",
											"    pm.expect(typeof requestObject.mpinAccount).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											" \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"virtualAccountNumber\": \"987654321\",\r\n  \"mpinAccount\": \"123456\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/va/transfer-va",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"va",
										"transfer-va"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 Transfer VA User Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'virtualAccountNumber' and 'mpinAccount' data types\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'virtualAccountNumber' adalah string\r",
											"    pm.expect(typeof requestObject.virtualAccountNumber).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'mpinAccount' adalah string\r",
											"    pm.expect(typeof requestObject.mpinAccount).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"virtualAccountNumber\": \"5151511515\",\r\n  \"mpinAccount\": \"444444\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/va/transfer-va",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"va",
										"transfer-va"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 Check Nomor VA User Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'virtualAccountNumber' data type\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'virtualAccountNumber' adalah string\r",
											"    pm.expect(typeof requestObject.virtualAccountNumber).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"virtualAccountNumber\": \"9191911919911991\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/va/check-virtual-account",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"va",
										"check-virtual-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 Transaction not found VA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/va/va-last-transaction?accountNum=23213213141414",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"va",
										"va-last-transaction"
									],
									"query": [
										{
											"key": "accountNum",
											"value": "23213213141414"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transfer Virtual Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate 'virtualAccountNumber' and 'mpinAccount' data types\", function () {\r",
									"    // Parsing request body dari JSON ke Object\r",
									"    let requestBody = pm.request.body.raw;\r",
									"    let requestObject = JSON.parse(requestBody);\r",
									"\r",
									"    // Validasi bahwa 'virtualAccountNumber' adalah string\r",
									"    pm.expect(typeof requestObject.virtualAccountNumber).to.eql('string');\r",
									"\r",
									"    // Validasi bahwa 'mpinAccount' adalah string\r",
									"    pm.expect(typeof requestObject.mpinAccount).to.eql('string');\r",
									"});\r",
									"\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"transactionDate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"transactionNum\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"recipientName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"type\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"recipientVirtualAccountNum\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"nominal\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"transactionDate\",\r",
									"        \"transactionNum\",\r",
									"        \"recipientName\",\r",
									"        \"type\",\r",
									"        \"recipientVirtualAccountNum\",\r",
									"        \"nominal\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"virtualAccountNumber\": \"543216789\",\r\n  \"mpinAccount\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/va/transfer-va",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"va",
								"transfer-va"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Nomor VA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate 'virtualAccountNumber' data type\", function () {\r",
									"    // Parsing request body dari JSON ke Object\r",
									"    let requestBody = pm.request.body.raw;\r",
									"    let requestObject = JSON.parse(requestBody);\r",
									"\r",
									"    // Validasi bahwa 'virtualAccountNumber' adalah string\r",
									"    pm.expect(typeof requestObject.virtualAccountNumber).to.eql('string');\r",
									"});\r",
									"\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"accountNum\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"accountName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"nominal\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"accountNum\",\r",
									"        \"accountName\",\r",
									"        \"nominal\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"virtualAccountNumber\": \"543216789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/va/check-virtual-account",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"va",
								"check-virtual-account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Last Transaction VA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"accountName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"accountNumber\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"accountName\",\r",
									"            \"accountNumber\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"accountName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"accountNumber\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"accountName\",\r",
									"            \"accountNumber\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/va/va-last-transaction?accountNum=1234567890",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"va",
								"va-last-transaction"
							],
							"query": [
								{
									"key": "accountNum",
									"value": "1234567890"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"BASE_URL\") + '/api/v1/auth/user/refresh-token',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            \"refreshToken\": pm.environment.get(\"USER_REFRESH_TOKEN\")\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        const dataJson = res.json();\r",
							"        pm.environment.set('USER_TOKEN', dataJson.data.accessToken); // Simpan access token baru ke environment\r",
							"    }\r",
							"});\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Ewallet",
			"item": [
				{
					"name": "Negative Test",
					"item": [
						{
							"name": "404 Wrong Number Check Account Ewallet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'ewalletId' and 'ewalletAccount' data types\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'ewalletId' adalah number\r",
											"    pm.expect(typeof requestObject.ewalletId).to.eql('number');\r",
											"\r",
											"    // Validasi bahwa 'ewalletAccount' adalah string\r",
											"    pm.expect(typeof requestObject.ewalletAccount).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ewalletId\":2,\r\n    \"ewalletAccount\":\"11122233344\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/transaction/ewallet/check",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"transaction",
										"ewallet",
										"check"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Wrong Pin Create Transaction Ewallet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'ewalletId', 'ewalletAccount', 'nominal', 'note', and 'pin' data types\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'ewalletId' adalah number\r",
											"    pm.expect(typeof requestObject.ewalletId).to.eql('number');\r",
											"\r",
											"    // Validasi bahwa 'ewalletAccount' adalah string\r",
											"    pm.expect(typeof requestObject.ewalletAccount).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'nominal' adalah number\r",
											"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
											"\r",
											"    // Validasi bahwa 'note' adalah string\r",
											"    pm.expect(typeof requestObject.note).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'pin' adalah string\r",
											"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ewalletId\":4,\r\n    \"ewalletAccount\":\"081987654321\",\r\n    \"nominal\":10,\r\n    \"note\":\"Testing QA\",\r\n    \"pin\":\"123455\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/transaction/ewallet/create",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"transaction",
										"ewallet",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "402 Insufficient Balance Create Transaction Ewallet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 402\", function () {\r",
											"        pm.response.to.have.status(402);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'ewalletId', 'ewalletAccount', 'nominal', 'note', and 'pin' data types\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'ewalletId' adalah number\r",
											"    pm.expect(typeof requestObject.ewalletId).to.eql('number');\r",
											"\r",
											"    // Validasi bahwa 'ewalletAccount' adalah string\r",
											"    pm.expect(typeof requestObject.ewalletAccount).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'nominal' adalah number\r",
											"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
											"\r",
											"    // Validasi bahwa 'note' adalah string\r",
											"    pm.expect(typeof requestObject.note).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'pin' adalah string\r",
											"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ewalletId\":4,\r\n    \"ewalletAccount\":\"081987654321\",\r\n    \"nominal\":999999999,\r\n    \"note\":\"Testing QA\",\r\n    \"pin\":\"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/transaction/ewallet/create",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"transaction",
										"ewallet",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 User Not Found Create Transaction Ewallet Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'ewalletId', 'ewalletAccount', 'nominal', 'note', and 'pin' data types\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'ewalletId' adalah number\r",
											"    pm.expect(typeof requestObject.ewalletId).to.eql('number');\r",
											"\r",
											"    // Validasi bahwa 'ewalletAccount' adalah string\r",
											"    pm.expect(typeof requestObject.ewalletAccount).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'nominal' adalah number\r",
											"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
											"\r",
											"    // Validasi bahwa 'note' adalah string\r",
											"    pm.expect(typeof requestObject.note).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'pin' adalah string\r",
											"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ewalletId\":4,\r\n    \"ewalletAccount\":\"081987654329\",\r\n    \"nominal\":100,\r\n    \"note\":\"Testing QA\",\r\n    \"pin\":\"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/transaction/ewallet/create",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"transaction",
										"ewallet",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Account Ewallet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate 'ewalletId' and 'ewalletAccount' data types\", function () {\r",
									"    // Parsing request body dari JSON ke Object\r",
									"    let requestBody = pm.request.body.raw;\r",
									"    let requestObject = JSON.parse(requestBody);\r",
									"\r",
									"    // Validasi bahwa 'ewalletId' adalah number\r",
									"    pm.expect(typeof requestObject.ewalletId).to.eql('number');\r",
									"\r",
									"    // Validasi bahwa 'ewalletAccount' adalah string\r",
									"    pm.expect(typeof requestObject.ewalletAccount).to.eql('string');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"ewalletName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ewalletAccountId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"ewalletAccount\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ewalletAccountName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"ewalletName\",\r",
									"        \"ewalletAccountId\",\r",
									"        \"ewalletAccount\",\r",
									"        \"ewalletAccountName\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ewalletId\":2,\r\n    \"ewalletAccount\":\"086123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/transaction/ewallet/check",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"transaction",
								"ewallet",
								"check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Transaction Ewallet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate 'ewalletId', 'ewalletAccount', 'nominal', 'note', and 'pin' data types\", function () {\r",
									"    // Parsing request body dari JSON ke Object\r",
									"    let requestBody = pm.request.body.raw;\r",
									"    let requestObject = JSON.parse(requestBody);\r",
									"\r",
									"    // Validasi bahwa 'ewalletId' adalah number\r",
									"    pm.expect(typeof requestObject.ewalletId).to.eql('number');\r",
									"\r",
									"    // Validasi bahwa 'ewalletAccount' adalah string\r",
									"    pm.expect(typeof requestObject.ewalletAccount).to.eql('string');\r",
									"\r",
									"    // Validasi bahwa 'nominal' adalah number\r",
									"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
									"\r",
									"    // Validasi bahwa 'note' adalah string\r",
									"    pm.expect(typeof requestObject.note).to.eql('string');\r",
									"\r",
									"    // Validasi bahwa 'pin' adalah string\r",
									"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"transactionNum\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"transactionDate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"nameSender\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"accountSender\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ewalletName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ewalletAccountName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ewalletAccount\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"nominal\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"feeAdmin\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"note\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"transactionNum\",\r",
									"        \"transactionDate\",\r",
									"        \"nameSender\",\r",
									"        \"accountSender\",\r",
									"        \"ewalletName\",\r",
									"        \"ewalletAccountName\",\r",
									"        \"ewalletAccount\",\r",
									"        \"nominal\",\r",
									"        \"feeAdmin\",\r",
									"        \"note\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ewalletId\":4,\r\n    \"ewalletAccount\":\"081987654321\",\r\n    \"nominal\":10,\r\n    \"note\":\"Testing QA\",\r\n    \"pin\":\"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/transaction/ewallet/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"transaction",
								"ewallet",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ewallet history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"ewalletAccountId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"ewalletName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletImage\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletAccount\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletAccountName\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"ewalletAccountId\",\r",
									"            \"ewalletName\",\r",
									"            \"ewalletImage\",\r",
									"            \"ewalletAccount\",\r",
									"            \"ewalletAccountName\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"ewalletAccountId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"ewalletName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletImage\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletAccount\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletAccountName\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"ewalletAccountId\",\r",
									"            \"ewalletName\",\r",
									"            \"ewalletImage\",\r",
									"            \"ewalletAccount\",\r",
									"            \"ewalletAccountName\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/transaction/ewallet/history",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"transaction",
								"ewallet",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Data Ewallet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"ewalletId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"ewalletName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletImage\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"ewalletId\",\r",
									"            \"ewalletName\",\r",
									"            \"ewalletImage\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"ewalletId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"ewalletName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletImage\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"ewalletId\",\r",
									"            \"ewalletName\",\r",
									"            \"ewalletImage\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"ewalletId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"ewalletName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletImage\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"ewalletId\",\r",
									"            \"ewalletName\",\r",
									"            \"ewalletImage\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"ewalletId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"ewalletName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletImage\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"ewalletId\",\r",
									"            \"ewalletName\",\r",
									"            \"ewalletImage\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"ewalletId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"ewalletName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletImage\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"ewalletId\",\r",
									"            \"ewalletName\",\r",
									"            \"ewalletImage\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/transaction/ewallet",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"transaction",
								"ewallet"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Data Ewallet [/]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"ewalletId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"ewalletName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletImage\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"ewalletId\",\r",
									"            \"ewalletName\",\r",
									"            \"ewalletImage\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"ewalletId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"ewalletName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletImage\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"ewalletId\",\r",
									"            \"ewalletName\",\r",
									"            \"ewalletImage\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"ewalletId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"ewalletName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletImage\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"ewalletId\",\r",
									"            \"ewalletName\",\r",
									"            \"ewalletImage\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"ewalletId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"ewalletName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletImage\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"ewalletId\",\r",
									"            \"ewalletName\",\r",
									"            \"ewalletImage\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"ewalletId\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"ewalletName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"ewalletImage\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"ewalletId\",\r",
									"            \"ewalletName\",\r",
									"            \"ewalletImage\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/transaction/ewallet/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"transaction",
								"ewallet",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"BASE_URL\") + '/api/v1/auth/user/refresh-token',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            \"refreshToken\": pm.environment.get(\"USER_REFRESH_TOKEN\")\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        const dataJson = res.json();\r",
							"        pm.environment.set('USER_TOKEN', dataJson.data.accessToken); // Simpan access token baru ke environment\r",
							"    }\r",
							"});\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Notification",
			"item": [
				{
					"name": "GET notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"createdDate\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"typeNotification\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"tittle\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"description\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"createdDate\",\r",
									"            \"typeNotification\",\r",
									"            \"tittle\",\r",
									"            \"description\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"createdDate\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"typeNotification\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"tittle\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"description\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"createdDate\",\r",
									"            \"typeNotification\",\r",
									"            \"tittle\",\r",
									"            \"description\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"createdDate\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"typeNotification\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"tittle\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"description\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"createdDate\",\r",
									"            \"typeNotification\",\r",
									"            \"tittle\",\r",
									"            \"description\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/notif",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"notif"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET notifications [/]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"createdDate\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"typeNotification\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"tittle\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"description\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"createdDate\",\r",
									"            \"typeNotification\",\r",
									"            \"tittle\",\r",
									"            \"description\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"createdDate\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"typeNotification\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"tittle\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"description\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"createdDate\",\r",
									"            \"typeNotification\",\r",
									"            \"tittle\",\r",
									"            \"description\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"createdDate\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"typeNotification\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"tittle\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"description\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"createdDate\",\r",
									"            \"typeNotification\",\r",
									"            \"tittle\",\r",
									"            \"description\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/notif/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"notif",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"BASE_URL\") + '/api/v1/auth/user/refresh-token',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            \"refreshToken\": pm.environment.get(\"USER_REFRESH_TOKEN\")\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        const dataJson = res.json();\r",
							"        pm.environment.set('USER_TOKEN', dataJson.data.accessToken); // Simpan access token baru ke environment\r",
							"    }\r",
							"});\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Qris",
			"item": [
				{
					"name": "Negative Test",
					"item": [
						{
							"name": "401 Wrong Pin Transfer Qris Merchant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'merchantNo', 'merchantName', 'nominal', and 'pin' data types\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'merchantNo' adalah string\r",
											"    pm.expect(typeof requestObject.merchantNo).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'merchantName' adalah string\r",
											"    pm.expect(typeof requestObject.merchantName).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'nominal' adalah number\r",
											"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
											"\r",
											"    // Validasi bahwa 'pin' adalah string\r",
											"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"merchantNo\": \"0215ID20200176137420303UME\",\r\n  \"merchantName\": \"DOMPET DHUAFA ZAKAT\",\r\n  \"nominal\": 1000,\r\n  \"pin\": \"123459\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/qris/merchant",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"qris",
										"merchant"
									]
								}
							},
							"response": []
						},
						{
							"name": "402 Insufficient Balance Transfer Qris Merchant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 402\", function () {\r",
											"        pm.response.to.have.status(402);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate 'merchantNo', 'merchantName', 'nominal', and 'pin' data types\", function () {\r",
											"    // Parsing request body dari JSON ke Object\r",
											"    let requestBody = pm.request.body.raw;\r",
											"    let requestObject = JSON.parse(requestBody);\r",
											"\r",
											"    // Validasi bahwa 'merchantNo' adalah string\r",
											"    pm.expect(typeof requestObject.merchantNo).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'merchantName' adalah string\r",
											"    pm.expect(typeof requestObject.merchantName).to.eql('string');\r",
											"\r",
											"    // Validasi bahwa 'nominal' adalah number\r",
											"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
											"\r",
											"    // Validasi bahwa 'pin' adalah string\r",
											"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const schema = \r",
											"\r",
											"{\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"code\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"code\",\r",
											"    \"message\",\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function () {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{USER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"merchantNo\": \"0215ID20200176137420303UME\",\r\n  \"merchantName\": \"DOMPET DHUAFA ZAKAT\",\r\n  \"nominal\": 999999999,\r\n  \"pin\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/qris/merchant",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"qris",
										"merchant"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transfer Qris Merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate 'merchantNo', 'merchantName', 'nominal', and 'pin' data types\", function () {\r",
									"    // Parsing request body dari JSON ke Object\r",
									"    let requestBody = pm.request.body.raw;\r",
									"    let requestObject = JSON.parse(requestBody);\r",
									"\r",
									"    // Validasi bahwa 'merchantNo' adalah string\r",
									"    pm.expect(typeof requestObject.merchantNo).to.eql('string');\r",
									"\r",
									"    // Validasi bahwa 'merchantName' adalah string\r",
									"    pm.expect(typeof requestObject.merchantName).to.eql('string');\r",
									"\r",
									"    // Validasi bahwa 'nominal' adalah number\r",
									"    pm.expect(typeof requestObject.nominal).to.eql('number');\r",
									"\r",
									"    // Validasi bahwa 'pin' adalah string\r",
									"    pm.expect(typeof requestObject.pin).to.eql('string');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"transaction_num\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"transaction_date\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name_sender\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"accountnum_sender\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name_recipient\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"accountnum_recipient\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"nominal\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"transaction_num\",\r",
									"        \"transaction_date\",\r",
									"        \"name_sender\",\r",
									"        \"accountnum_sender\",\r",
									"        \"name_recipient\",\r",
									"        \"accountnum_recipient\",\r",
									"        \"nominal\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"merchantNo\": \"0215ID20200176137420303UME\",\r\n  \"merchantName\": \"DOMPET DHUAFA ZAKAT\",\r\n  \"nominal\": 1000,\r\n  \"pin\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/qris/merchant",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"qris",
								"merchant"
							]
						}
					},
					"response": []
				},
				{
					"name": "Data qris",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"accountNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"username\",\r",
									"        \"accountNumber\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/qris",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"qris"
							]
						}
					},
					"response": []
				},
				{
					"name": "Data qris [/]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"accountNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"username\",\r",
									"        \"accountNumber\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/qris/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"qris",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"BASE_URL\") + '/api/v1/auth/user/refresh-token',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            \"refreshToken\": pm.environment.get(\"USER_REFRESH_TOKEN\")\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else {\r",
							"        const dataJson = res.json();\r",
							"        pm.environment.set('USER_TOKEN', dataJson.data.accessToken); // Simpan access token baru ke environment\r",
							"    }\r",
							"});\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Test",
			"item": [
				{
					"name": "404 False URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate 'username' and 'password' data types\", function () {\r",
									"    // Parsing request body dari JSON ke Object\r",
									"    let requestBody = pm.request.body.raw;\r",
									"    let requestObject = JSON.parse(requestBody);\r",
									"\r",
									"    // Validasi bahwa 'username' adalah string\r",
									"    pm.expect(typeof requestObject.username).to.eql('string');\r",
									"\r",
									"    // Validasi bahwa 'password' adalah string\r",
									"    pm.expect(typeof requestObject.password).to.eql('string');\r",
									"});\r",
									"\r",
									"\r",
									"const schema = \r",
									"{\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"null\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\" : \"customerusername\",\r\n  \"password\" : \"customerusername\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/user/logiin",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"user",
								"logiin"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Wrong Athentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const schema = \r",
									"{\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"null\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOjEsInN1YiI6ImpvaG5kb2UiLCJpYXQiOjE3MjQzMjUwMjksImV4cCI6MTcyNDMyNjgyOX0.r-qUOswomz4Ze7FroDw3B6KlJg8YoveOrmKNbeGH8jahusdGV",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/profile",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "500 Out Of Handle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code is 500\", function () {\r",
									"        pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate 'mpin' data type\", function () {\r",
									"    // Parsing request body dari JSON ke Object\r",
									"    let requestBody = pm.request.body.raw;\r",
									"    let requestObject = JSON.parse(requestBody);\r",
									"\r",
									"    // Validasi bahwa 'mpin' adalah string\r",
									"    pm.expect(typeof requestObject.mpin).to.eql('string');\r",
									"});\r",
									"\r",
									"\r",
									"const schema = \r",
									"{\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"null\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mpin\" : \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/relogin",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"relogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 JWT Expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"        pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const schema = \r",
									"\r",
									"{\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"code\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"null\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"code\",\r",
									"    \"message\",\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function () {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/profile",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "502 Server Shutdown Bad Gateway",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code is 502\", function () {\r",
									"        pm.response.to.have.status(502);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate 'username' and 'password' data types\", function () {\r",
									"    // Parsing request body dari JSON ke Object\r",
									"    let requestBody = pm.request.body.raw;\r",
									"    let requestObject = JSON.parse(requestBody);\r",
									"\r",
									"    // Validasi bahwa 'username' adalah string\r",
									"    pm.expect(typeof requestObject.username).to.eql('string');\r",
									"\r",
									"    // Validasi bahwa 'password' adalah string\r",
									"    pm.expect(typeof requestObject.password).to.eql('string');\r",
									"});\r",
									"\r",
									"\r",
									"// const schema = \r",
									"// {\r",
									"\r",
									"//   \"type\": \"object\",\r",
									"//   \"properties\": {\r",
									"//     \"code\": {\r",
									"//       \"type\": \"integer\"\r",
									"//     },\r",
									"//     \"message\": {\r",
									"//       \"type\": \"string\"\r",
									"//     },\r",
									"//     \"status\": {\r",
									"//       \"type\": \"boolean\"\r",
									"//     },\r",
									"//     \"data\": {\r",
									"//       \"type\": \"null\"\r",
									"//     }\r",
									"//   },\r",
									"//   \"required\": [\r",
									"//     \"code\",\r",
									"//     \"message\",\r",
									"//     \"status\",\r",
									"//     \"data\"\r",
									"//   ]\r",
									"// }\r",
									"// pm.test(\"Validating schema\", function () {\r",
									"//   pm.response.to.have.jsonSchema(schema);\r",
									"// });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\" : \"johndoe\",\r\n  \"password\" : \"password123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/user/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is less than 5000ms\", function () {\r",
					"        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
					"        \r",
					"});\r",
					"\r",
					""
				]
			}
		}
	]
}